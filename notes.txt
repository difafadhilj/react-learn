Component bisa class, bisa function. Namun, class memiliki beberapa hal dibanding function.

Props adalah argumen fungsi. Props dimasukkan dalam element HTML.

State adalah properti milik Component. Jangan rubah state secara langsung, pake fungsi 
this.setState(). Apabila state diubah, maka component tersebut akan dirender ulang.

Masing-masing komponen di react mempunyai lifecycle yang bisa dimanipulasi dan dimodifikasi selama berada dalam 3 fase : 

1. Mounting : Meletakkan elemen kedalam DOM

React mempunyai built-in methods yang akan dipanggil secara berurutan selama dalam fase mounting(Meletakkan elemen kedalam DOM) component, yaitu : 

    I. constructor() ::: Pertama dipanggil sebelum yang lain. Dipanggil setiap membuat komponen

    II. getDerivedStateFromProps() ::: Dipanggil tepat sebelum merender elemen di DOM
    III. render() => Wajib
    IIII. componentDidMount()

Note : render() selalu dipanggil, yang lain opsional (Akan dipanggil jika kita mendefinisikan)


2. Updating :
3. Unmounting







User :
- Register => /register (DONE)
- Login => /login (DONE)
- Home => / (DONE)
- Book details => /books (DONE)
- Getbyid, add Order

Admin : 
- CRUD Buku (DONE)
- get all User (DONE)
- Get all, getbyid, add Order



import React from "react";
import { useForm } from "react-hook-form";
import "bootstrap/dist/css/bootstrap.min.css";

export default function App() {
  const { register, handleSubmit, errors, getValues } = useForm();
  const onSubmit = data => console.log(data);

  return (
    <div className="container mt-5">
      <form onSubmit={handleSubmit(onSubmit)} noValidate>
        <div className="row">
          <div className="col">
            <label htmlFor="name">Name : </label>
            <input
              id="name"
              className="form-control"
              type="text"
              name="name"
              ref={register({
                required: "This fields is required",
                minLength: {
                  value: 3,
                  message:
                    "This field is required max length 3 characters length"
                }
              })}
            />
            <span className="text-danger">
              {errors.name && errors.name.message}
            </span>
          </div>
        </div>

        <div>
          <label htmlFor="email">Email : </label>
          <input
            id="email"
            className="form-control"
            type="email"
            name="email"
            ref={register({
              required: "This fields is required",
              pattern: {
                value: /^([\w.%+-]+)@([\w-]+\.)+([\w]{2,})$/i,
                message: "Wrong pattern"
              }
            })}
          />
          <span className="text-danger">
            {errors.email && errors.email.message}
          </span>
        </div>

        <div>
          <label htmlFor="password">Password : </label>
          <input
            id="password"
            className="form-control"
            type="password"
            name="password"
            ref={register({
              required: {
                value: true,
                message: "This field is required"
              },
              minLength: {
                value: 8,
                message: "This field required at least 8 characters length"
              }
            })}
          />
          <span className="text-danger">
            {errors.password && errors.password.message}
          </span>
        </div>
        <div>
          <label htmlFor="confirm_password">Confirm password : </label>
          <input
            id="confirm_password"
            className="form-control"
            type="password"
            name="confirm_password"
            ref={register({
              minLength: {
                value: 8,
                message: "This field required at least 8 characters length"
              },
              required: "This field is required",
              validate: value =>
                value === getValues().password || "Password doesn't match"
            })}
          />
          <span className="text-danger">
            {errors.confirm_password && errors.confirm_password.message}
          </span>
        </div>
        <div>
          <input type="submit" className="form-control btn btn-primary mt-4" />
        </div>
      </form>
    </div>
  );
}
